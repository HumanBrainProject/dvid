// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: labelops.proto

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		labelops.proto

	It has these top-level messages:
		MergeOp
		SplitOp
		OpCompleted
*/
package proto

import proto1 "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MergeOp struct {
	Mutid  uint64   `protobuf:"varint,1,opt,name=mutid,proto3" json:"mutid,omitempty"`
	Target uint64   `protobuf:"varint,2,opt,name=target,proto3" json:"target,omitempty"`
	Merged []uint64 `protobuf:"varint,3,rep,packed,name=merged" json:"merged,omitempty"`
}

func (m *MergeOp) Reset()                    { *m = MergeOp{} }
func (*MergeOp) ProtoMessage()               {}
func (*MergeOp) Descriptor() ([]byte, []int) { return fileDescriptorLabelops, []int{0} }

func (m *MergeOp) GetMutid() uint64 {
	if m != nil {
		return m.Mutid
	}
	return 0
}

func (m *MergeOp) GetTarget() uint64 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *MergeOp) GetMerged() []uint64 {
	if m != nil {
		return m.Merged
	}
	return nil
}

type SplitOp struct {
	Mutid    uint64 `protobuf:"varint,1,opt,name=mutid,proto3" json:"mutid,omitempty"`
	Target   uint64 `protobuf:"varint,2,opt,name=target,proto3" json:"target,omitempty"`
	Newlabel uint64 `protobuf:"varint,3,opt,name=newlabel,proto3" json:"newlabel,omitempty"`
	Coarse   bool   `protobuf:"varint,4,opt,name=coarse,proto3" json:"coarse,omitempty"`
	Rles     []byte `protobuf:"bytes,5,opt,name=rles,proto3" json:"rles,omitempty"`
}

func (m *SplitOp) Reset()                    { *m = SplitOp{} }
func (*SplitOp) ProtoMessage()               {}
func (*SplitOp) Descriptor() ([]byte, []int) { return fileDescriptorLabelops, []int{1} }

func (m *SplitOp) GetMutid() uint64 {
	if m != nil {
		return m.Mutid
	}
	return 0
}

func (m *SplitOp) GetTarget() uint64 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *SplitOp) GetNewlabel() uint64 {
	if m != nil {
		return m.Newlabel
	}
	return 0
}

func (m *SplitOp) GetCoarse() bool {
	if m != nil {
		return m.Coarse
	}
	return false
}

func (m *SplitOp) GetRles() []byte {
	if m != nil {
		return m.Rles
	}
	return nil
}

type OpCompleted struct {
	Mutid uint64 `protobuf:"varint,1,opt,name=mutid,proto3" json:"mutid,omitempty"`
	Stage string `protobuf:"bytes,2,opt,name=stage,proto3" json:"stage,omitempty"`
}

func (m *OpCompleted) Reset()                    { *m = OpCompleted{} }
func (*OpCompleted) ProtoMessage()               {}
func (*OpCompleted) Descriptor() ([]byte, []int) { return fileDescriptorLabelops, []int{2} }

func (m *OpCompleted) GetMutid() uint64 {
	if m != nil {
		return m.Mutid
	}
	return 0
}

func (m *OpCompleted) GetStage() string {
	if m != nil {
		return m.Stage
	}
	return ""
}

func init() {
	proto1.RegisterType((*MergeOp)(nil), "proto.MergeOp")
	proto1.RegisterType((*SplitOp)(nil), "proto.SplitOp")
	proto1.RegisterType((*OpCompleted)(nil), "proto.OpCompleted")
}
func (this *MergeOp) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MergeOp)
	if !ok {
		that2, ok := that.(MergeOp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Mutid != that1.Mutid {
		return false
	}
	if this.Target != that1.Target {
		return false
	}
	if len(this.Merged) != len(that1.Merged) {
		return false
	}
	for i := range this.Merged {
		if this.Merged[i] != that1.Merged[i] {
			return false
		}
	}
	return true
}
func (this *SplitOp) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SplitOp)
	if !ok {
		that2, ok := that.(SplitOp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Mutid != that1.Mutid {
		return false
	}
	if this.Target != that1.Target {
		return false
	}
	if this.Newlabel != that1.Newlabel {
		return false
	}
	if this.Coarse != that1.Coarse {
		return false
	}
	if !bytes.Equal(this.Rles, that1.Rles) {
		return false
	}
	return true
}
func (this *OpCompleted) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpCompleted)
	if !ok {
		that2, ok := that.(OpCompleted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Mutid != that1.Mutid {
		return false
	}
	if this.Stage != that1.Stage {
		return false
	}
	return true
}
func (this *MergeOp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.MergeOp{")
	s = append(s, "Mutid: "+fmt.Sprintf("%#v", this.Mutid)+",\n")
	s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	s = append(s, "Merged: "+fmt.Sprintf("%#v", this.Merged)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SplitOp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&proto.SplitOp{")
	s = append(s, "Mutid: "+fmt.Sprintf("%#v", this.Mutid)+",\n")
	s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	s = append(s, "Newlabel: "+fmt.Sprintf("%#v", this.Newlabel)+",\n")
	s = append(s, "Coarse: "+fmt.Sprintf("%#v", this.Coarse)+",\n")
	s = append(s, "Rles: "+fmt.Sprintf("%#v", this.Rles)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpCompleted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.OpCompleted{")
	s = append(s, "Mutid: "+fmt.Sprintf("%#v", this.Mutid)+",\n")
	s = append(s, "Stage: "+fmt.Sprintf("%#v", this.Stage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLabelops(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MergeOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MergeOp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mutid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(m.Mutid))
	}
	if m.Target != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(m.Target))
	}
	if len(m.Merged) > 0 {
		dAtA2 := make([]byte, len(m.Merged)*10)
		var j1 int
		for _, num := range m.Merged {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *SplitOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplitOp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mutid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(m.Mutid))
	}
	if m.Target != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(m.Target))
	}
	if m.Newlabel != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(m.Newlabel))
	}
	if m.Coarse {
		dAtA[i] = 0x20
		i++
		if m.Coarse {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Rles) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(len(m.Rles)))
		i += copy(dAtA[i:], m.Rles)
	}
	return i, nil
}

func (m *OpCompleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpCompleted) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mutid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(m.Mutid))
	}
	if len(m.Stage) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(len(m.Stage)))
		i += copy(dAtA[i:], m.Stage)
	}
	return i, nil
}

func encodeFixed64Labelops(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Labelops(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintLabelops(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MergeOp) Size() (n int) {
	var l int
	_ = l
	if m.Mutid != 0 {
		n += 1 + sovLabelops(uint64(m.Mutid))
	}
	if m.Target != 0 {
		n += 1 + sovLabelops(uint64(m.Target))
	}
	if len(m.Merged) > 0 {
		l = 0
		for _, e := range m.Merged {
			l += sovLabelops(uint64(e))
		}
		n += 1 + sovLabelops(uint64(l)) + l
	}
	return n
}

func (m *SplitOp) Size() (n int) {
	var l int
	_ = l
	if m.Mutid != 0 {
		n += 1 + sovLabelops(uint64(m.Mutid))
	}
	if m.Target != 0 {
		n += 1 + sovLabelops(uint64(m.Target))
	}
	if m.Newlabel != 0 {
		n += 1 + sovLabelops(uint64(m.Newlabel))
	}
	if m.Coarse {
		n += 2
	}
	l = len(m.Rles)
	if l > 0 {
		n += 1 + l + sovLabelops(uint64(l))
	}
	return n
}

func (m *OpCompleted) Size() (n int) {
	var l int
	_ = l
	if m.Mutid != 0 {
		n += 1 + sovLabelops(uint64(m.Mutid))
	}
	l = len(m.Stage)
	if l > 0 {
		n += 1 + l + sovLabelops(uint64(l))
	}
	return n
}

func sovLabelops(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLabelops(x uint64) (n int) {
	return sovLabelops(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MergeOp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MergeOp{`,
		`Mutid:` + fmt.Sprintf("%v", this.Mutid) + `,`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`Merged:` + fmt.Sprintf("%v", this.Merged) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SplitOp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SplitOp{`,
		`Mutid:` + fmt.Sprintf("%v", this.Mutid) + `,`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`Newlabel:` + fmt.Sprintf("%v", this.Newlabel) + `,`,
		`Coarse:` + fmt.Sprintf("%v", this.Coarse) + `,`,
		`Rles:` + fmt.Sprintf("%v", this.Rles) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpCompleted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpCompleted{`,
		`Mutid:` + fmt.Sprintf("%v", this.Mutid) + `,`,
		`Stage:` + fmt.Sprintf("%v", this.Stage) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLabelops(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MergeOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLabelops
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MergeOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MergeOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mutid", wireType)
			}
			m.Mutid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mutid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			m.Target = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Target |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLabelops
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Merged = append(m.Merged, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLabelops
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLabelops
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLabelops
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Merged = append(m.Merged, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Merged", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLabelops(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLabelops
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SplitOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLabelops
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplitOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplitOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mutid", wireType)
			}
			m.Mutid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mutid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			m.Target = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Target |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Newlabel", wireType)
			}
			m.Newlabel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Newlabel |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coarse", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coarse = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rles", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLabelops
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rles = append(m.Rles[:0], dAtA[iNdEx:postIndex]...)
			if m.Rles == nil {
				m.Rles = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLabelops(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLabelops
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpCompleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLabelops
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpCompleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpCompleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mutid", wireType)
			}
			m.Mutid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mutid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLabelops
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLabelops(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLabelops
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLabelops(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLabelops
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLabelops
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLabelops
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLabelops(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLabelops = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLabelops   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("labelops.proto", fileDescriptorLabelops) }

var fileDescriptorLabelops = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0x49, 0x4c, 0x4a,
	0xcd, 0xc9, 0x2f, 0x28, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xfe,
	0x5c, 0xec, 0xbe, 0xa9, 0x45, 0xe9, 0xa9, 0xfe, 0x05, 0x42, 0x22, 0x5c, 0xac, 0xb9, 0xa5, 0x25,
	0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x2c, 0x41, 0x10, 0x8e, 0x90, 0x18, 0x17, 0x5b, 0x49,
	0x62, 0x51, 0x7a, 0x6a, 0x89, 0x04, 0x13, 0x58, 0x18, 0xca, 0x03, 0x89, 0xe7, 0x82, 0x34, 0xa6,
	0x48, 0x30, 0x2b, 0x30, 0x83, 0xc4, 0x21, 0x3c, 0xa5, 0x7a, 0x2e, 0xf6, 0xe0, 0x82, 0x9c, 0xcc,
	0x12, 0x92, 0x0d, 0x94, 0xe2, 0xe2, 0xc8, 0x4b, 0x2d, 0x07, 0xbb, 0x52, 0x82, 0x19, 0x2c, 0x03,
	0xe7, 0x83, 0xf4, 0x24, 0xe7, 0x27, 0x16, 0x15, 0xa7, 0x4a, 0xb0, 0x28, 0x30, 0x6a, 0x70, 0x04,
	0x41, 0x79, 0x42, 0x42, 0x5c, 0x2c, 0x45, 0x39, 0xa9, 0xc5, 0x12, 0xac, 0x0a, 0x8c, 0x1a, 0x3c,
	0x41, 0x60, 0xb6, 0x92, 0x25, 0x17, 0xb7, 0x7f, 0x81, 0x73, 0x7e, 0x6e, 0x41, 0x4e, 0x6a, 0x49,
	0x6a, 0x0a, 0x0e, 0x47, 0x88, 0x70, 0xb1, 0x16, 0x97, 0x24, 0xa6, 0xa7, 0x82, 0xdd, 0xc0, 0x19,
	0x04, 0xe1, 0x38, 0xe9, 0x5c, 0x78, 0x28, 0xc7, 0x70, 0xe3, 0xa1, 0x1c, 0xc3, 0x87, 0x87, 0x72,
	0x8c, 0x0d, 0x8f, 0xe4, 0x18, 0x57, 0x3c, 0x92, 0x63, 0x3c, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23,
	0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x5f, 0x3c, 0x92, 0x63, 0xf8, 0xf0, 0x48, 0x8e, 0x71, 0xc2,
	0x63, 0x39, 0x86, 0x24, 0x36, 0x70, 0x08, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x7e, 0xdb,
	0x5a, 0x8b, 0x5a, 0x01, 0x00, 0x00,
}
