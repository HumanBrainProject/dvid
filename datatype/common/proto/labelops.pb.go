// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: labelops.proto

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		labelops.proto

	It has these top-level messages:
		MergeOp
		MappingOp
		MappingOps
		SplitOp
		OpCompleted
		Affinity
		Affinities
		AffinityTable
		SVCount
		LabelIndex
*/
package proto

import proto1 "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import bytes "bytes"

import strings "strings"
import reflect "reflect"
import sortkeys "github.com/gogo/protobuf/sortkeys"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MergeOp struct {
	Mutid  uint64   `protobuf:"varint,1,opt,name=mutid,proto3" json:"mutid,omitempty"`
	Target uint64   `protobuf:"varint,2,opt,name=target,proto3" json:"target,omitempty"`
	Merged []uint64 `protobuf:"varint,3,rep,packed,name=merged" json:"merged,omitempty"`
}

func (m *MergeOp) Reset()                    { *m = MergeOp{} }
func (*MergeOp) ProtoMessage()               {}
func (*MergeOp) Descriptor() ([]byte, []int) { return fileDescriptorLabelops, []int{0} }

func (m *MergeOp) GetMutid() uint64 {
	if m != nil {
		return m.Mutid
	}
	return 0
}

func (m *MergeOp) GetTarget() uint64 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *MergeOp) GetMerged() []uint64 {
	if m != nil {
		return m.Merged
	}
	return nil
}

type MappingOp struct {
	Mutid    uint64   `protobuf:"varint,1,opt,name=mutid,proto3" json:"mutid,omitempty"`
	Mapped   uint64   `protobuf:"varint,2,opt,name=mapped,proto3" json:"mapped,omitempty"`
	Original []uint64 `protobuf:"varint,3,rep,packed,name=original" json:"original,omitempty"`
}

func (m *MappingOp) Reset()                    { *m = MappingOp{} }
func (*MappingOp) ProtoMessage()               {}
func (*MappingOp) Descriptor() ([]byte, []int) { return fileDescriptorLabelops, []int{1} }

func (m *MappingOp) GetMutid() uint64 {
	if m != nil {
		return m.Mutid
	}
	return 0
}

func (m *MappingOp) GetMapped() uint64 {
	if m != nil {
		return m.Mapped
	}
	return 0
}

func (m *MappingOp) GetOriginal() []uint64 {
	if m != nil {
		return m.Original
	}
	return nil
}

type MappingOps struct {
	Mappings []*MappingOp `protobuf:"bytes,1,rep,name=mappings" json:"mappings,omitempty"`
}

func (m *MappingOps) Reset()                    { *m = MappingOps{} }
func (*MappingOps) ProtoMessage()               {}
func (*MappingOps) Descriptor() ([]byte, []int) { return fileDescriptorLabelops, []int{2} }

func (m *MappingOps) GetMappings() []*MappingOp {
	if m != nil {
		return m.Mappings
	}
	return nil
}

type SplitOp struct {
	Mutid    uint64 `protobuf:"varint,1,opt,name=mutid,proto3" json:"mutid,omitempty"`
	Target   uint64 `protobuf:"varint,2,opt,name=target,proto3" json:"target,omitempty"`
	Newlabel uint64 `protobuf:"varint,3,opt,name=newlabel,proto3" json:"newlabel,omitempty"`
	Coarse   bool   `protobuf:"varint,4,opt,name=coarse,proto3" json:"coarse,omitempty"`
	Rles     []byte `protobuf:"bytes,5,opt,name=rles,proto3" json:"rles,omitempty"`
}

func (m *SplitOp) Reset()                    { *m = SplitOp{} }
func (*SplitOp) ProtoMessage()               {}
func (*SplitOp) Descriptor() ([]byte, []int) { return fileDescriptorLabelops, []int{3} }

func (m *SplitOp) GetMutid() uint64 {
	if m != nil {
		return m.Mutid
	}
	return 0
}

func (m *SplitOp) GetTarget() uint64 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *SplitOp) GetNewlabel() uint64 {
	if m != nil {
		return m.Newlabel
	}
	return 0
}

func (m *SplitOp) GetCoarse() bool {
	if m != nil {
		return m.Coarse
	}
	return false
}

func (m *SplitOp) GetRles() []byte {
	if m != nil {
		return m.Rles
	}
	return nil
}

type OpCompleted struct {
	Mutid uint64 `protobuf:"varint,1,opt,name=mutid,proto3" json:"mutid,omitempty"`
	Stage string `protobuf:"bytes,2,opt,name=stage,proto3" json:"stage,omitempty"`
}

func (m *OpCompleted) Reset()                    { *m = OpCompleted{} }
func (*OpCompleted) ProtoMessage()               {}
func (*OpCompleted) Descriptor() ([]byte, []int) { return fileDescriptorLabelops, []int{4} }

func (m *OpCompleted) GetMutid() uint64 {
	if m != nil {
		return m.Mutid
	}
	return 0
}

func (m *OpCompleted) GetStage() string {
	if m != nil {
		return m.Stage
	}
	return ""
}

type Affinity struct {
	Label1 uint64  `protobuf:"varint,1,opt,name=label1,proto3" json:"label1,omitempty"`
	Label2 uint64  `protobuf:"varint,2,opt,name=label2,proto3" json:"label2,omitempty"`
	Value  float32 `protobuf:"fixed32,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Affinity) Reset()                    { *m = Affinity{} }
func (*Affinity) ProtoMessage()               {}
func (*Affinity) Descriptor() ([]byte, []int) { return fileDescriptorLabelops, []int{5} }

func (m *Affinity) GetLabel1() uint64 {
	if m != nil {
		return m.Label1
	}
	return 0
}

func (m *Affinity) GetLabel2() uint64 {
	if m != nil {
		return m.Label2
	}
	return 0
}

func (m *Affinity) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Affinities struct {
	Labels     []uint64  `protobuf:"varint,1,rep,packed,name=labels" json:"labels,omitempty"`
	Affinities []float32 `protobuf:"fixed32,2,rep,packed,name=affinities" json:"affinities,omitempty"`
}

func (m *Affinities) Reset()                    { *m = Affinities{} }
func (*Affinities) ProtoMessage()               {}
func (*Affinities) Descriptor() ([]byte, []int) { return fileDescriptorLabelops, []int{6} }

func (m *Affinities) GetLabels() []uint64 {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Affinities) GetAffinities() []float32 {
	if m != nil {
		return m.Affinities
	}
	return nil
}

type AffinityTable struct {
	Table map[uint64]*Affinities `protobuf:"bytes,1,rep,name=table" json:"table,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AffinityTable) Reset()                    { *m = AffinityTable{} }
func (*AffinityTable) ProtoMessage()               {}
func (*AffinityTable) Descriptor() ([]byte, []int) { return fileDescriptorLabelops, []int{7} }

func (m *AffinityTable) GetTable() map[uint64]*Affinities {
	if m != nil {
		return m.Table
	}
	return nil
}

type SVCount struct {
	Counts map[uint64]uint32 `protobuf:"bytes,1,rep,name=counts" json:"counts,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *SVCount) Reset()                    { *m = SVCount{} }
func (*SVCount) ProtoMessage()               {}
func (*SVCount) Descriptor() ([]byte, []int) { return fileDescriptorLabelops, []int{8} }

func (m *SVCount) GetCounts() map[uint64]uint32 {
	if m != nil {
		return m.Counts
	}
	return nil
}

type LabelIndex struct {
	Blocks      map[string]*SVCount `protobuf:"bytes,1,rep,name=blocks" json:"blocks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	LastMutid   uint64              `protobuf:"varint,3,opt,name=last_mutid,json=lastMutid,proto3" json:"last_mutid,omitempty"`
	LastModTime string              `protobuf:"bytes,4,opt,name=last_mod_time,json=lastModTime,proto3" json:"last_mod_time,omitempty"`
	LastModUser string              `protobuf:"bytes,5,opt,name=last_mod_user,json=lastModUser,proto3" json:"last_mod_user,omitempty"`
}

func (m *LabelIndex) Reset()                    { *m = LabelIndex{} }
func (*LabelIndex) ProtoMessage()               {}
func (*LabelIndex) Descriptor() ([]byte, []int) { return fileDescriptorLabelops, []int{9} }

func (m *LabelIndex) GetBlocks() map[string]*SVCount {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func (m *LabelIndex) GetLastMutid() uint64 {
	if m != nil {
		return m.LastMutid
	}
	return 0
}

func (m *LabelIndex) GetLastModTime() string {
	if m != nil {
		return m.LastModTime
	}
	return ""
}

func (m *LabelIndex) GetLastModUser() string {
	if m != nil {
		return m.LastModUser
	}
	return ""
}

func init() {
	proto1.RegisterType((*MergeOp)(nil), "proto.MergeOp")
	proto1.RegisterType((*MappingOp)(nil), "proto.MappingOp")
	proto1.RegisterType((*MappingOps)(nil), "proto.MappingOps")
	proto1.RegisterType((*SplitOp)(nil), "proto.SplitOp")
	proto1.RegisterType((*OpCompleted)(nil), "proto.OpCompleted")
	proto1.RegisterType((*Affinity)(nil), "proto.Affinity")
	proto1.RegisterType((*Affinities)(nil), "proto.Affinities")
	proto1.RegisterType((*AffinityTable)(nil), "proto.AffinityTable")
	proto1.RegisterType((*SVCount)(nil), "proto.SVCount")
	proto1.RegisterType((*LabelIndex)(nil), "proto.LabelIndex")
}
func (this *MergeOp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MergeOp)
	if !ok {
		that2, ok := that.(MergeOp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mutid != that1.Mutid {
		return false
	}
	if this.Target != that1.Target {
		return false
	}
	if len(this.Merged) != len(that1.Merged) {
		return false
	}
	for i := range this.Merged {
		if this.Merged[i] != that1.Merged[i] {
			return false
		}
	}
	return true
}
func (this *MappingOp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MappingOp)
	if !ok {
		that2, ok := that.(MappingOp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mutid != that1.Mutid {
		return false
	}
	if this.Mapped != that1.Mapped {
		return false
	}
	if len(this.Original) != len(that1.Original) {
		return false
	}
	for i := range this.Original {
		if this.Original[i] != that1.Original[i] {
			return false
		}
	}
	return true
}
func (this *MappingOps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MappingOps)
	if !ok {
		that2, ok := that.(MappingOps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Mappings) != len(that1.Mappings) {
		return false
	}
	for i := range this.Mappings {
		if !this.Mappings[i].Equal(that1.Mappings[i]) {
			return false
		}
	}
	return true
}
func (this *SplitOp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SplitOp)
	if !ok {
		that2, ok := that.(SplitOp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mutid != that1.Mutid {
		return false
	}
	if this.Target != that1.Target {
		return false
	}
	if this.Newlabel != that1.Newlabel {
		return false
	}
	if this.Coarse != that1.Coarse {
		return false
	}
	if !bytes.Equal(this.Rles, that1.Rles) {
		return false
	}
	return true
}
func (this *OpCompleted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpCompleted)
	if !ok {
		that2, ok := that.(OpCompleted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mutid != that1.Mutid {
		return false
	}
	if this.Stage != that1.Stage {
		return false
	}
	return true
}
func (this *Affinity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Affinity)
	if !ok {
		that2, ok := that.(Affinity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Label1 != that1.Label1 {
		return false
	}
	if this.Label2 != that1.Label2 {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Affinities) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Affinities)
	if !ok {
		that2, ok := that.(Affinities)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if len(this.Affinities) != len(that1.Affinities) {
		return false
	}
	for i := range this.Affinities {
		if this.Affinities[i] != that1.Affinities[i] {
			return false
		}
	}
	return true
}
func (this *AffinityTable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AffinityTable)
	if !ok {
		that2, ok := that.(AffinityTable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Table) != len(that1.Table) {
		return false
	}
	for i := range this.Table {
		if !this.Table[i].Equal(that1.Table[i]) {
			return false
		}
	}
	return true
}
func (this *SVCount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SVCount)
	if !ok {
		that2, ok := that.(SVCount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Counts) != len(that1.Counts) {
		return false
	}
	for i := range this.Counts {
		if this.Counts[i] != that1.Counts[i] {
			return false
		}
	}
	return true
}
func (this *LabelIndex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LabelIndex)
	if !ok {
		that2, ok := that.(LabelIndex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Blocks) != len(that1.Blocks) {
		return false
	}
	for i := range this.Blocks {
		if !this.Blocks[i].Equal(that1.Blocks[i]) {
			return false
		}
	}
	if this.LastMutid != that1.LastMutid {
		return false
	}
	if this.LastModTime != that1.LastModTime {
		return false
	}
	if this.LastModUser != that1.LastModUser {
		return false
	}
	return true
}
func (this *MergeOp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.MergeOp{")
	s = append(s, "Mutid: "+fmt.Sprintf("%#v", this.Mutid)+",\n")
	s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	s = append(s, "Merged: "+fmt.Sprintf("%#v", this.Merged)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MappingOp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.MappingOp{")
	s = append(s, "Mutid: "+fmt.Sprintf("%#v", this.Mutid)+",\n")
	s = append(s, "Mapped: "+fmt.Sprintf("%#v", this.Mapped)+",\n")
	s = append(s, "Original: "+fmt.Sprintf("%#v", this.Original)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MappingOps) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.MappingOps{")
	if this.Mappings != nil {
		s = append(s, "Mappings: "+fmt.Sprintf("%#v", this.Mappings)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SplitOp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&proto.SplitOp{")
	s = append(s, "Mutid: "+fmt.Sprintf("%#v", this.Mutid)+",\n")
	s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	s = append(s, "Newlabel: "+fmt.Sprintf("%#v", this.Newlabel)+",\n")
	s = append(s, "Coarse: "+fmt.Sprintf("%#v", this.Coarse)+",\n")
	s = append(s, "Rles: "+fmt.Sprintf("%#v", this.Rles)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpCompleted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.OpCompleted{")
	s = append(s, "Mutid: "+fmt.Sprintf("%#v", this.Mutid)+",\n")
	s = append(s, "Stage: "+fmt.Sprintf("%#v", this.Stage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Affinity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.Affinity{")
	s = append(s, "Label1: "+fmt.Sprintf("%#v", this.Label1)+",\n")
	s = append(s, "Label2: "+fmt.Sprintf("%#v", this.Label2)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Affinities) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.Affinities{")
	s = append(s, "Labels: "+fmt.Sprintf("%#v", this.Labels)+",\n")
	s = append(s, "Affinities: "+fmt.Sprintf("%#v", this.Affinities)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AffinityTable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.AffinityTable{")
	keysForTable := make([]uint64, 0, len(this.Table))
	for k, _ := range this.Table {
		keysForTable = append(keysForTable, k)
	}
	sortkeys.Uint64s(keysForTable)
	mapStringForTable := "map[uint64]*Affinities{"
	for _, k := range keysForTable {
		mapStringForTable += fmt.Sprintf("%#v: %#v,", k, this.Table[k])
	}
	mapStringForTable += "}"
	if this.Table != nil {
		s = append(s, "Table: "+mapStringForTable+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SVCount) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.SVCount{")
	keysForCounts := make([]uint64, 0, len(this.Counts))
	for k, _ := range this.Counts {
		keysForCounts = append(keysForCounts, k)
	}
	sortkeys.Uint64s(keysForCounts)
	mapStringForCounts := "map[uint64]uint32{"
	for _, k := range keysForCounts {
		mapStringForCounts += fmt.Sprintf("%#v: %#v,", k, this.Counts[k])
	}
	mapStringForCounts += "}"
	if this.Counts != nil {
		s = append(s, "Counts: "+mapStringForCounts+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LabelIndex) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&proto.LabelIndex{")
	keysForBlocks := make([]string, 0, len(this.Blocks))
	for k, _ := range this.Blocks {
		keysForBlocks = append(keysForBlocks, k)
	}
	sortkeys.Strings(keysForBlocks)
	mapStringForBlocks := "map[string]*SVCount{"
	for _, k := range keysForBlocks {
		mapStringForBlocks += fmt.Sprintf("%#v: %#v,", k, this.Blocks[k])
	}
	mapStringForBlocks += "}"
	if this.Blocks != nil {
		s = append(s, "Blocks: "+mapStringForBlocks+",\n")
	}
	s = append(s, "LastMutid: "+fmt.Sprintf("%#v", this.LastMutid)+",\n")
	s = append(s, "LastModTime: "+fmt.Sprintf("%#v", this.LastModTime)+",\n")
	s = append(s, "LastModUser: "+fmt.Sprintf("%#v", this.LastModUser)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLabelops(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MergeOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MergeOp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mutid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(m.Mutid))
	}
	if m.Target != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(m.Target))
	}
	if len(m.Merged) > 0 {
		dAtA2 := make([]byte, len(m.Merged)*10)
		var j1 int
		for _, num := range m.Merged {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *MappingOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MappingOp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mutid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(m.Mutid))
	}
	if m.Mapped != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(m.Mapped))
	}
	if len(m.Original) > 0 {
		dAtA4 := make([]byte, len(m.Original)*10)
		var j3 int
		for _, num := range m.Original {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *MappingOps) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MappingOps) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mappings) > 0 {
		for _, msg := range m.Mappings {
			dAtA[i] = 0xa
			i++
			i = encodeVarintLabelops(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SplitOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplitOp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mutid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(m.Mutid))
	}
	if m.Target != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(m.Target))
	}
	if m.Newlabel != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(m.Newlabel))
	}
	if m.Coarse {
		dAtA[i] = 0x20
		i++
		if m.Coarse {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Rles) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(len(m.Rles)))
		i += copy(dAtA[i:], m.Rles)
	}
	return i, nil
}

func (m *OpCompleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpCompleted) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mutid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(m.Mutid))
	}
	if len(m.Stage) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(len(m.Stage)))
		i += copy(dAtA[i:], m.Stage)
	}
	return i, nil
}

func (m *Affinity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Affinity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Label1 != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(m.Label1))
	}
	if m.Label2 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(m.Label2))
	}
	if m.Value != 0 {
		dAtA[i] = 0x1d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Value))))
		i += 4
	}
	return i, nil
}

func (m *Affinities) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Affinities) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Labels) > 0 {
		dAtA6 := make([]byte, len(m.Labels)*10)
		var j5 int
		for _, num := range m.Labels {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if len(m.Affinities) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(len(m.Affinities)*4))
		for _, num := range m.Affinities {
			f7 := math.Float32bits(float32(num))
			binary.LittleEndian.PutUint32(dAtA[i:], uint32(f7))
			i += 4
		}
	}
	return i, nil
}

func (m *AffinityTable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AffinityTable) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Table) > 0 {
		for k, _ := range m.Table {
			dAtA[i] = 0xa
			i++
			v := m.Table[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovLabelops(uint64(msgSize))
			}
			mapSize := 1 + sovLabelops(uint64(k)) + msgSize
			i = encodeVarintLabelops(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintLabelops(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintLabelops(dAtA, i, uint64(v.Size()))
				n8, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n8
			}
		}
	}
	return i, nil
}

func (m *SVCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SVCount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Counts) > 0 {
		for k, _ := range m.Counts {
			dAtA[i] = 0xa
			i++
			v := m.Counts[k]
			mapSize := 1 + sovLabelops(uint64(k)) + 1 + sovLabelops(uint64(v))
			i = encodeVarintLabelops(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintLabelops(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintLabelops(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *LabelIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelIndex) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for k, _ := range m.Blocks {
			dAtA[i] = 0xa
			i++
			v := m.Blocks[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovLabelops(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovLabelops(uint64(len(k))) + msgSize
			i = encodeVarintLabelops(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintLabelops(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintLabelops(dAtA, i, uint64(v.Size()))
				n9, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n9
			}
		}
	}
	if m.LastMutid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(m.LastMutid))
	}
	if len(m.LastModTime) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(len(m.LastModTime)))
		i += copy(dAtA[i:], m.LastModTime)
	}
	if len(m.LastModUser) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintLabelops(dAtA, i, uint64(len(m.LastModUser)))
		i += copy(dAtA[i:], m.LastModUser)
	}
	return i, nil
}

func encodeVarintLabelops(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MergeOp) Size() (n int) {
	var l int
	_ = l
	if m.Mutid != 0 {
		n += 1 + sovLabelops(uint64(m.Mutid))
	}
	if m.Target != 0 {
		n += 1 + sovLabelops(uint64(m.Target))
	}
	if len(m.Merged) > 0 {
		l = 0
		for _, e := range m.Merged {
			l += sovLabelops(uint64(e))
		}
		n += 1 + sovLabelops(uint64(l)) + l
	}
	return n
}

func (m *MappingOp) Size() (n int) {
	var l int
	_ = l
	if m.Mutid != 0 {
		n += 1 + sovLabelops(uint64(m.Mutid))
	}
	if m.Mapped != 0 {
		n += 1 + sovLabelops(uint64(m.Mapped))
	}
	if len(m.Original) > 0 {
		l = 0
		for _, e := range m.Original {
			l += sovLabelops(uint64(e))
		}
		n += 1 + sovLabelops(uint64(l)) + l
	}
	return n
}

func (m *MappingOps) Size() (n int) {
	var l int
	_ = l
	if len(m.Mappings) > 0 {
		for _, e := range m.Mappings {
			l = e.Size()
			n += 1 + l + sovLabelops(uint64(l))
		}
	}
	return n
}

func (m *SplitOp) Size() (n int) {
	var l int
	_ = l
	if m.Mutid != 0 {
		n += 1 + sovLabelops(uint64(m.Mutid))
	}
	if m.Target != 0 {
		n += 1 + sovLabelops(uint64(m.Target))
	}
	if m.Newlabel != 0 {
		n += 1 + sovLabelops(uint64(m.Newlabel))
	}
	if m.Coarse {
		n += 2
	}
	l = len(m.Rles)
	if l > 0 {
		n += 1 + l + sovLabelops(uint64(l))
	}
	return n
}

func (m *OpCompleted) Size() (n int) {
	var l int
	_ = l
	if m.Mutid != 0 {
		n += 1 + sovLabelops(uint64(m.Mutid))
	}
	l = len(m.Stage)
	if l > 0 {
		n += 1 + l + sovLabelops(uint64(l))
	}
	return n
}

func (m *Affinity) Size() (n int) {
	var l int
	_ = l
	if m.Label1 != 0 {
		n += 1 + sovLabelops(uint64(m.Label1))
	}
	if m.Label2 != 0 {
		n += 1 + sovLabelops(uint64(m.Label2))
	}
	if m.Value != 0 {
		n += 5
	}
	return n
}

func (m *Affinities) Size() (n int) {
	var l int
	_ = l
	if len(m.Labels) > 0 {
		l = 0
		for _, e := range m.Labels {
			l += sovLabelops(uint64(e))
		}
		n += 1 + sovLabelops(uint64(l)) + l
	}
	if len(m.Affinities) > 0 {
		n += 1 + sovLabelops(uint64(len(m.Affinities)*4)) + len(m.Affinities)*4
	}
	return n
}

func (m *AffinityTable) Size() (n int) {
	var l int
	_ = l
	if len(m.Table) > 0 {
		for k, v := range m.Table {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovLabelops(uint64(l))
			}
			mapEntrySize := 1 + sovLabelops(uint64(k)) + l
			n += mapEntrySize + 1 + sovLabelops(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SVCount) Size() (n int) {
	var l int
	_ = l
	if len(m.Counts) > 0 {
		for k, v := range m.Counts {
			_ = k
			_ = v
			mapEntrySize := 1 + sovLabelops(uint64(k)) + 1 + sovLabelops(uint64(v))
			n += mapEntrySize + 1 + sovLabelops(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *LabelIndex) Size() (n int) {
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for k, v := range m.Blocks {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovLabelops(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovLabelops(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovLabelops(uint64(mapEntrySize))
		}
	}
	if m.LastMutid != 0 {
		n += 1 + sovLabelops(uint64(m.LastMutid))
	}
	l = len(m.LastModTime)
	if l > 0 {
		n += 1 + l + sovLabelops(uint64(l))
	}
	l = len(m.LastModUser)
	if l > 0 {
		n += 1 + l + sovLabelops(uint64(l))
	}
	return n
}

func sovLabelops(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLabelops(x uint64) (n int) {
	return sovLabelops(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MergeOp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MergeOp{`,
		`Mutid:` + fmt.Sprintf("%v", this.Mutid) + `,`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`Merged:` + fmt.Sprintf("%v", this.Merged) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MappingOp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MappingOp{`,
		`Mutid:` + fmt.Sprintf("%v", this.Mutid) + `,`,
		`Mapped:` + fmt.Sprintf("%v", this.Mapped) + `,`,
		`Original:` + fmt.Sprintf("%v", this.Original) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MappingOps) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MappingOps{`,
		`Mappings:` + strings.Replace(fmt.Sprintf("%v", this.Mappings), "MappingOp", "MappingOp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SplitOp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SplitOp{`,
		`Mutid:` + fmt.Sprintf("%v", this.Mutid) + `,`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`Newlabel:` + fmt.Sprintf("%v", this.Newlabel) + `,`,
		`Coarse:` + fmt.Sprintf("%v", this.Coarse) + `,`,
		`Rles:` + fmt.Sprintf("%v", this.Rles) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpCompleted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpCompleted{`,
		`Mutid:` + fmt.Sprintf("%v", this.Mutid) + `,`,
		`Stage:` + fmt.Sprintf("%v", this.Stage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Affinity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Affinity{`,
		`Label1:` + fmt.Sprintf("%v", this.Label1) + `,`,
		`Label2:` + fmt.Sprintf("%v", this.Label2) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Affinities) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Affinities{`,
		`Labels:` + fmt.Sprintf("%v", this.Labels) + `,`,
		`Affinities:` + fmt.Sprintf("%v", this.Affinities) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AffinityTable) String() string {
	if this == nil {
		return "nil"
	}
	keysForTable := make([]uint64, 0, len(this.Table))
	for k, _ := range this.Table {
		keysForTable = append(keysForTable, k)
	}
	sortkeys.Uint64s(keysForTable)
	mapStringForTable := "map[uint64]*Affinities{"
	for _, k := range keysForTable {
		mapStringForTable += fmt.Sprintf("%v: %v,", k, this.Table[k])
	}
	mapStringForTable += "}"
	s := strings.Join([]string{`&AffinityTable{`,
		`Table:` + mapStringForTable + `,`,
		`}`,
	}, "")
	return s
}
func (this *SVCount) String() string {
	if this == nil {
		return "nil"
	}
	keysForCounts := make([]uint64, 0, len(this.Counts))
	for k, _ := range this.Counts {
		keysForCounts = append(keysForCounts, k)
	}
	sortkeys.Uint64s(keysForCounts)
	mapStringForCounts := "map[uint64]uint32{"
	for _, k := range keysForCounts {
		mapStringForCounts += fmt.Sprintf("%v: %v,", k, this.Counts[k])
	}
	mapStringForCounts += "}"
	s := strings.Join([]string{`&SVCount{`,
		`Counts:` + mapStringForCounts + `,`,
		`}`,
	}, "")
	return s
}
func (this *LabelIndex) String() string {
	if this == nil {
		return "nil"
	}
	keysForBlocks := make([]string, 0, len(this.Blocks))
	for k, _ := range this.Blocks {
		keysForBlocks = append(keysForBlocks, k)
	}
	sortkeys.Strings(keysForBlocks)
	mapStringForBlocks := "map[string]*SVCount{"
	for _, k := range keysForBlocks {
		mapStringForBlocks += fmt.Sprintf("%v: %v,", k, this.Blocks[k])
	}
	mapStringForBlocks += "}"
	s := strings.Join([]string{`&LabelIndex{`,
		`Blocks:` + mapStringForBlocks + `,`,
		`LastMutid:` + fmt.Sprintf("%v", this.LastMutid) + `,`,
		`LastModTime:` + fmt.Sprintf("%v", this.LastModTime) + `,`,
		`LastModUser:` + fmt.Sprintf("%v", this.LastModUser) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLabelops(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MergeOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLabelops
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MergeOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MergeOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mutid", wireType)
			}
			m.Mutid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mutid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			m.Target = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Target |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLabelops
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Merged = append(m.Merged, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLabelops
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLabelops
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLabelops
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Merged = append(m.Merged, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Merged", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLabelops(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLabelops
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MappingOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLabelops
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MappingOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MappingOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mutid", wireType)
			}
			m.Mutid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mutid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mapped", wireType)
			}
			m.Mapped = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mapped |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLabelops
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Original = append(m.Original, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLabelops
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLabelops
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLabelops
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Original = append(m.Original, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Original", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLabelops(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLabelops
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MappingOps) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLabelops
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MappingOps: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MappingOps: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mappings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLabelops
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mappings = append(m.Mappings, &MappingOp{})
			if err := m.Mappings[len(m.Mappings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLabelops(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLabelops
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SplitOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLabelops
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplitOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplitOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mutid", wireType)
			}
			m.Mutid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mutid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			m.Target = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Target |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Newlabel", wireType)
			}
			m.Newlabel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Newlabel |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coarse", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coarse = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rles", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLabelops
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rles = append(m.Rles[:0], dAtA[iNdEx:postIndex]...)
			if m.Rles == nil {
				m.Rles = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLabelops(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLabelops
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpCompleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLabelops
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpCompleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpCompleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mutid", wireType)
			}
			m.Mutid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mutid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLabelops
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLabelops(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLabelops
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Affinity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLabelops
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Affinity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Affinity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label1", wireType)
			}
			m.Label1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Label1 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label2", wireType)
			}
			m.Label2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Label2 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipLabelops(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLabelops
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Affinities) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLabelops
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Affinities: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Affinities: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLabelops
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Labels = append(m.Labels, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLabelops
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLabelops
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLabelops
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Labels = append(m.Labels, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
		case 2:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Affinities = append(m.Affinities, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLabelops
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLabelops
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Affinities = append(m.Affinities, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Affinities", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLabelops(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLabelops
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AffinityTable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLabelops
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AffinityTable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AffinityTable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLabelops
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Table == nil {
				m.Table = make(map[uint64]*Affinities)
			}
			var mapkey uint64
			var mapvalue *Affinities
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLabelops
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLabelops
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLabelops
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthLabelops
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthLabelops
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Affinities{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLabelops(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthLabelops
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Table[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLabelops(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLabelops
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SVCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLabelops
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SVCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SVCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLabelops
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Counts == nil {
				m.Counts = make(map[uint64]uint32)
			}
			var mapkey uint64
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLabelops
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLabelops
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLabelops
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLabelops(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthLabelops
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Counts[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLabelops(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLabelops
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLabelops
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLabelops
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blocks == nil {
				m.Blocks = make(map[string]*SVCount)
			}
			var mapkey string
			var mapvalue *SVCount
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLabelops
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLabelops
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthLabelops
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLabelops
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthLabelops
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthLabelops
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SVCount{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLabelops(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthLabelops
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Blocks[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMutid", wireType)
			}
			m.LastMutid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastMutid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastModTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLabelops
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastModTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastModUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLabelops
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastModUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLabelops(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLabelops
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLabelops(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLabelops
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLabelops
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLabelops
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLabelops
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLabelops(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLabelops = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLabelops   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("labelops.proto", fileDescriptorLabelops) }

var fileDescriptorLabelops = []byte{
	// 585 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xcd, 0xc6, 0xcd, 0xd7, 0x98, 0x54, 0x65, 0x15, 0x21, 0xcb, 0x52, 0x17, 0xcb, 0x42, 0x22,
	0x87, 0x2a, 0x12, 0x41, 0x95, 0x68, 0x6f, 0xb4, 0x70, 0xa8, 0x20, 0x0a, 0x72, 0x5b, 0xae, 0x95,
	0x53, 0x6f, 0x23, 0xab, 0xfe, 0x92, 0x77, 0x03, 0xcd, 0x09, 0x7e, 0x02, 0x12, 0x7f, 0x82, 0x9f,
	0xc2, 0xb1, 0x47, 0x8e, 0xc4, 0x5c, 0x38, 0xf6, 0xc2, 0x1d, 0xed, 0x87, 0x1d, 0x47, 0x02, 0x24,
	0x2e, 0xf6, 0xbe, 0xd9, 0x37, 0x33, 0xef, 0xcd, 0x0e, 0x6c, 0x47, 0xfe, 0x8c, 0x46, 0x69, 0xc6,
	0x46, 0x59, 0x9e, 0xf2, 0x14, 0xb7, 0xe4, 0xcf, 0x9d, 0x42, 0x67, 0x42, 0xf3, 0x39, 0x9d, 0x66,
	0x78, 0x00, 0xad, 0x78, 0xc1, 0xc3, 0xc0, 0x42, 0x0e, 0x1a, 0x6e, 0x79, 0x0a, 0xe0, 0x07, 0xd0,
	0xe6, 0x7e, 0x3e, 0xa7, 0xdc, 0x6a, 0xca, 0xb0, 0x46, 0x22, 0x1e, 0x8b, 0xc4, 0xc0, 0x32, 0x1c,
	0x43, 0xc4, 0x15, 0x72, 0xcf, 0xa1, 0x37, 0xf1, 0xb3, 0x2c, 0x4c, 0xe6, 0xff, 0x2a, 0x19, 0xfb,
	0x59, 0x46, 0x83, 0xb2, 0xa4, 0x42, 0xd8, 0x86, 0x6e, 0x9a, 0x87, 0xf3, 0x30, 0xf1, 0x23, 0x5d,
	0xb4, 0xc2, 0xee, 0x21, 0x40, 0x55, 0x96, 0xe1, 0x3d, 0xe8, 0xc6, 0x0a, 0x31, 0x0b, 0x39, 0xc6,
	0xd0, 0x1c, 0xef, 0x28, 0x5b, 0xa3, 0x8a, 0xe4, 0x55, 0x0c, 0xf7, 0x03, 0x74, 0x4e, 0xb3, 0x28,
	0xe4, 0xff, 0xed, 0xd1, 0x86, 0x6e, 0x42, 0xdf, 0xcb, 0xc1, 0x59, 0x86, 0xbc, 0xa9, 0xb0, 0xc8,
	0xb9, 0x4c, 0xfd, 0x9c, 0x51, 0x6b, 0xcb, 0x41, 0xc3, 0xae, 0xa7, 0x11, 0xc6, 0xb0, 0x95, 0x47,
	0x94, 0x59, 0x2d, 0x07, 0x0d, 0xef, 0x79, 0xf2, 0xec, 0x1e, 0x80, 0x39, 0xcd, 0x8e, 0xd3, 0x38,
	0x8b, 0x28, 0xa7, 0xc1, 0x5f, 0x44, 0x0c, 0xa0, 0xc5, 0xb8, 0x3f, 0xa7, 0x52, 0x43, 0xcf, 0x53,
	0xc0, 0x7d, 0x03, 0xdd, 0xe7, 0x57, 0x57, 0x61, 0x12, 0xf2, 0xa5, 0x68, 0x29, 0x7b, 0x3f, 0xd1,
	0x89, 0x1a, 0x55, 0xf1, 0x71, 0x29, 0x5f, 0x21, 0x51, 0xf1, 0x9d, 0x1f, 0x2d, 0xa8, 0xd4, 0xde,
	0xf4, 0x14, 0x70, 0x5f, 0x00, 0xe8, 0x8a, 0x21, 0x65, 0x55, 0xae, 0x9a, 0x63, 0x99, 0xcb, 0x30,
	0x01, 0xf0, 0x2b, 0x96, 0xd5, 0x74, 0x8c, 0x61, 0xd3, 0xab, 0x45, 0xdc, 0xcf, 0x08, 0xfa, 0xa5,
	0xb0, 0x33, 0x7f, 0x16, 0x51, 0xbc, 0x0f, 0x2d, 0x2e, 0x0e, 0xfa, 0x41, 0x1e, 0xea, 0x07, 0xd9,
	0x20, 0x8d, 0xe4, 0xf7, 0x65, 0xc2, 0xf3, 0xa5, 0xa7, 0xd8, 0xf6, 0x2b, 0x80, 0x75, 0x10, 0xef,
	0x80, 0x71, 0x4d, 0x97, 0xda, 0x9f, 0x38, 0xe2, 0xc7, 0xa5, 0x09, 0xe1, 0xcd, 0x1c, 0xdf, 0xdf,
	0x2c, 0x1b, 0x52, 0xa6, 0x7d, 0x1d, 0x36, 0x9f, 0x21, 0xf7, 0x06, 0x3a, 0xa7, 0x6f, 0x8f, 0xd3,
	0x45, 0xc2, 0xf1, 0x58, 0xbc, 0xcf, 0x22, 0xe1, 0xe5, 0x82, 0xd8, 0x3a, 0x51, 0xdf, 0x8f, 0xe4,
	0x97, 0x29, 0x29, 0x9a, 0x69, 0x1f, 0x80, 0x59, 0x0b, 0xff, 0x41, 0xcc, 0xa0, 0x2e, 0xa6, 0x5f,
	0xef, 0xfc, 0x0b, 0x01, 0xbc, 0x16, 0xa3, 0x3b, 0x49, 0x02, 0x7a, 0x83, 0xf7, 0xa1, 0x3d, 0x8b,
	0xd2, 0xcb, 0xeb, 0xb2, 0xfb, 0xae, 0xee, 0xbe, 0xa6, 0x8c, 0x8e, 0xe4, 0xbd, 0x16, 0xa0, 0xc8,
	0x78, 0x17, 0x20, 0xf2, 0x19, 0xbf, 0x50, 0xeb, 0xa1, 0x56, 0xae, 0x27, 0x22, 0x13, 0xb9, 0x22,
	0x2e, 0xf4, 0xd5, 0x75, 0x1a, 0x5c, 0xf0, 0x30, 0x56, 0xab, 0xd7, 0xf3, 0x4c, 0xc9, 0x48, 0x83,
	0xb3, 0x30, 0xa6, 0x1b, 0x9c, 0x05, 0xa3, 0xb9, 0x5c, 0xc4, 0x35, 0xe7, 0x9c, 0xd1, 0xdc, 0x3e,
	0x01, 0xb3, 0xd6, 0xbd, 0xee, 0xb3, 0xa7, 0x7c, 0x3e, 0xda, 0x1c, 0xfa, 0xf6, 0xe6, 0xec, 0x6a,
	0xbe, 0x8f, 0xf6, 0x6e, 0x57, 0xa4, 0xf1, 0x6d, 0x45, 0x1a, 0x77, 0x2b, 0x82, 0x3e, 0x16, 0x04,
	0x7d, 0x29, 0x08, 0xfa, 0x5a, 0x10, 0x74, 0x5b, 0x10, 0xf4, 0xbd, 0x20, 0xe8, 0x67, 0x41, 0x1a,
	0x77, 0x05, 0x41, 0x9f, 0x7e, 0x90, 0xc6, 0xac, 0x2d, 0xeb, 0x3c, 0xfd, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0xe1, 0x93, 0xdb, 0x4e, 0x8d, 0x04, 0x00, 0x00,
}
