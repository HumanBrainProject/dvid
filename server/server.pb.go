// Code generated by protoc-gen-go.
// source: server.proto
// DO NOT EDIT!

package server

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type Subvolume struct {
	Dataset          *string `protobuf:"bytes,1,req,name=dataset" json:"dataset,omitempty"`
	OffsetX          *int32  `protobuf:"varint,2,req,name=offsetX" json:"offsetX,omitempty"`
	OffsetY          *int32  `protobuf:"varint,3,req,name=offsetY" json:"offsetY,omitempty"`
	OffsetZ          *int32  `protobuf:"varint,4,req,name=offsetZ" json:"offsetZ,omitempty"`
	SizeX            *uint32 `protobuf:"varint,5,req,name=sizeX" json:"sizeX,omitempty"`
	SizeY            *uint32 `protobuf:"varint,6,req,name=sizeY" json:"sizeY,omitempty"`
	SizeZ            *uint32 `protobuf:"varint,7,req,name=sizeZ" json:"sizeZ,omitempty"`
	Data             []byte  `protobuf:"bytes,8,opt,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Subvolume) Reset()         { *m = Subvolume{} }
func (m *Subvolume) String() string { return proto.CompactTextString(m) }
func (*Subvolume) ProtoMessage()    {}

func (m *Subvolume) GetDataset() string {
	if m != nil && m.Dataset != nil {
		return *m.Dataset
	}
	return ""
}

func (m *Subvolume) GetOffsetX() int32 {
	if m != nil && m.OffsetX != nil {
		return *m.OffsetX
	}
	return 0
}

func (m *Subvolume) GetOffsetY() int32 {
	if m != nil && m.OffsetY != nil {
		return *m.OffsetY
	}
	return 0
}

func (m *Subvolume) GetOffsetZ() int32 {
	if m != nil && m.OffsetZ != nil {
		return *m.OffsetZ
	}
	return 0
}

func (m *Subvolume) GetSizeX() uint32 {
	if m != nil && m.SizeX != nil {
		return *m.SizeX
	}
	return 0
}

func (m *Subvolume) GetSizeY() uint32 {
	if m != nil && m.SizeY != nil {
		return *m.SizeY
	}
	return 0
}

func (m *Subvolume) GetSizeZ() uint32 {
	if m != nil && m.SizeZ != nil {
		return *m.SizeZ
	}
	return 0
}

func (m *Subvolume) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
}
